#include "NeuralNetwork.h"

unsigned char model_tflite[] = {
  0x1c, 0x00, 0x00, 0x00, 0x54, 0x46, 0x4c, 0x33, 0x14, 0x00, 0x20, 0x00,
  0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x1c, 0x00, 0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x98, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00,
  0x14, 0x06, 0x00, 0x00, 0x28, 0x05, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00,
  0x08, 0x06, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00,
  0x04, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x6d, 0x69, 0x6e, 0x5f,
  0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
  0x69, 0x6f, 0x6e, 0x00, 0x26, 0xfb, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x35, 0x2e, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x4d, 0x4c, 0x49, 0x52, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
  0x65, 0x64, 0x2e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x18, 0x00, 0x04, 0x00,
  0x08, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x14, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x2c, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x14, 0x05, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00,
  0x98, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
  0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00,
  0x07, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x30, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0f, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0xa4, 0xfb, 0xff, 0xff,
  0x14, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x49, 0x64, 0x65, 0x6e,
  0x74, 0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x20, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x8c, 0xfb, 0xff, 0xff, 0x7a, 0xfc, 0xff, 0xff,
  0x04, 0x00, 0x00, 0x00, 0x24, 0x03, 0x00, 0x00, 0x56, 0x1f, 0x39, 0x35,
  0x33, 0xa4, 0x10, 0xb6, 0x9c, 0x1d, 0x38, 0xb6, 0x88, 0x9e, 0x71, 0xb6,
  0xcb, 0xc9, 0x60, 0xb6, 0xd4, 0x0c, 0x4f, 0xb6, 0xc0, 0x16, 0x5e, 0xb6,
  0x10, 0xd3, 0x39, 0xb6, 0x9f, 0xf8, 0x29, 0xb6, 0xb4, 0x52, 0xba, 0xb5,
  0xb7, 0x1c, 0x78, 0xb5, 0x4b, 0xbc, 0xa7, 0xb5, 0xf7, 0x65, 0x3b, 0xb5,
  0x81, 0x34, 0xc4, 0xb5, 0xd0, 0x8b, 0x08, 0xb6, 0x7c, 0x7e, 0x38, 0xb6,
  0x24, 0xa0, 0x3c, 0xb6, 0xd4, 0x8e, 0xe2, 0xb5, 0xe7, 0xab, 0xa8, 0xb5,
  0x94, 0xc7, 0x92, 0xb5, 0xce, 0x32, 0x93, 0xb5, 0xc5, 0x87, 0xc3, 0xb5,
  0x5d, 0xea, 0xa9, 0xb5, 0x10, 0x44, 0x02, 0xb6, 0xf4, 0x25, 0xe9, 0xb5,
  0xc7, 0xaa, 0x23, 0xb6, 0x3f, 0x33, 0xe9, 0xb5, 0x4e, 0xdf, 0x03, 0xb6,
  0x06, 0x95, 0x1c, 0xb6, 0xfc, 0x4e, 0x05, 0xb6, 0x19, 0xfc, 0x09, 0xb6,
  0x7f, 0x0b, 0xc3, 0xb5, 0x37, 0x4b, 0xe9, 0xb5, 0x8f, 0xda, 0x9d, 0xb5,
  0x7a, 0x8e, 0xec, 0xb4, 0x9c, 0x8d, 0x43, 0xb5, 0x02, 0xfb, 0x1e, 0xb5,
  0x80, 0x05, 0x55, 0x32, 0x49, 0xb6, 0x17, 0xb5, 0x10, 0x5e, 0x09, 0xb2,
  0x7f, 0x8c, 0x3b, 0xb5, 0x0c, 0x35, 0x00, 0xb5, 0xee, 0x27, 0x75, 0xb5,
  0x06, 0x32, 0x49, 0xb5, 0x68, 0x09, 0x5a, 0xb4, 0xa0, 0xad, 0x6a, 0xb5,
  0xac, 0xd0, 0x8b, 0xb4, 0xe3, 0x64, 0x6d, 0xb5, 0xa1, 0x14, 0xc0, 0xb5,
  0xa0, 0x32, 0x01, 0xb5, 0xb4, 0x56, 0x5c, 0xb5, 0x55, 0x2f, 0x65, 0xb5,
  0x3b, 0x1d, 0x65, 0xb5, 0xaa, 0x2b, 0x46, 0xb5, 0x7f, 0x89, 0x02, 0xb5,
  0x7c, 0xae, 0xa8, 0xb4, 0xdf, 0x25, 0xe4, 0xb4, 0x47, 0x94, 0x08, 0xb5,
  0x5d, 0x14, 0x82, 0xb5, 0x82, 0x26, 0x2d, 0xb4, 0x98, 0x0e, 0x4c, 0xb5,
  0x2e, 0x52, 0xa1, 0xb5, 0x83, 0x04, 0x0b, 0xb6, 0xfa, 0x35, 0x9d, 0xb5,
  0x23, 0x13, 0xc5, 0xb5, 0x5c, 0xa0, 0xc5, 0xb5, 0xf6, 0x35, 0x7b, 0xb5,
  0xec, 0xe2, 0x00, 0xb5, 0x83, 0xff, 0x45, 0xb5, 0x79, 0x86, 0x71, 0xb5,
  0x8d, 0x0c, 0x30, 0xb5, 0xde, 0xa5, 0x06, 0xb5, 0xe0, 0xd6, 0x3d, 0xb5,
  0x61, 0x84, 0x2c, 0xb4, 0x16, 0xf7, 0x2c, 0xb5, 0xf8, 0x0c, 0x10, 0x35,
  0x7e, 0x69, 0xba, 0x34, 0x65, 0xbb, 0x99, 0xb4, 0x31, 0x0e, 0x82, 0xb4,
  0xa8, 0x13, 0x06, 0xb5, 0x9b, 0x73, 0x2e, 0xb5, 0xb9, 0x84, 0x8d, 0xb5,
  0xec, 0xa6, 0x91, 0xb5, 0x00, 0x0f, 0x7f, 0xb4, 0x6d, 0xa6, 0x78, 0xb5,
  0x07, 0x26, 0x07, 0xb5, 0xa4, 0xfb, 0x59, 0xb4, 0x6b, 0x1e, 0x66, 0xb5,
  0x28, 0x0b, 0xad, 0x32, 0xd8, 0xbc, 0x92, 0xb4, 0xf4, 0x94, 0x83, 0x33,
  0x34, 0xea, 0x37, 0xb5, 0x4a, 0x0e, 0x21, 0xb5, 0xc0, 0x3f, 0x49, 0xb1,
  0xa0, 0x2c, 0x9a, 0xb2, 0xe0, 0x53, 0x7f, 0x35, 0x0f, 0x15, 0xdf, 0x34,
  0x06, 0x31, 0x28, 0xb5, 0x80, 0x65, 0x96, 0xb5, 0x6a, 0x48, 0x46, 0xb5,
  0x4c, 0xc2, 0x3a, 0xb5, 0x60, 0xdb, 0xc8, 0xb4, 0xa8, 0x2e, 0xa6, 0xb2,
  0x10, 0x74, 0xbd, 0xb4, 0xe4, 0xbe, 0x30, 0xb5, 0x65, 0x3d, 0x93, 0xb5,
  0x30, 0xfe, 0xc3, 0xb5, 0x8d, 0x67, 0x1f, 0xb6, 0xd9, 0x74, 0xcc, 0xb5,
  0xf9, 0x59, 0xa2, 0xb5, 0xe1, 0xaf, 0xf7, 0xb5, 0xa5, 0xc1, 0xa5, 0xb5,
  0xd0, 0xd9, 0x49, 0xb5, 0xc0, 0xe1, 0xa3, 0xb5, 0x1b, 0x39, 0xad, 0xb5,
  0x40, 0xf7, 0xe4, 0xb5, 0x10, 0x01, 0x43, 0xb5, 0x66, 0xf7, 0x1a, 0xb6,
  0x0e, 0x86, 0x57, 0xb5, 0x9b, 0x3b, 0xbf, 0xb5, 0x76, 0x89, 0xc2, 0xb5,
  0x68, 0x7b, 0xbd, 0xb5, 0xb7, 0x30, 0x86, 0xb5, 0x4c, 0x72, 0x9d, 0xb5,
  0x46, 0x87, 0xbf, 0xb5, 0x53, 0x87, 0xc9, 0xb5, 0x60, 0x90, 0x2d, 0xb6,
  0x7d, 0xbb, 0xeb, 0xb5, 0xd8, 0xd9, 0xb2, 0xb5, 0x84, 0xae, 0x84, 0xb5,
  0x5e, 0x9f, 0x87, 0xb5, 0x12, 0xad, 0x51, 0xb5, 0x40, 0xa5, 0x46, 0xb5,
  0x47, 0xee, 0xaf, 0xb5, 0xbc, 0xc1, 0xb7, 0xb4, 0x00, 0x77, 0xd0, 0xb5,
  0xee, 0x73, 0xa4, 0xb5, 0x70, 0x69, 0xbc, 0xb5, 0x58, 0x91, 0x99, 0xb5,
  0xf9, 0x8c, 0xb4, 0xb5, 0xd8, 0x5d, 0x84, 0xb5, 0xe3, 0xe5, 0xc5, 0xb4,
  0x58, 0x35, 0x90, 0xb5, 0xff, 0x5f, 0x89, 0xb5, 0x26, 0x54, 0xf4, 0xb4,
  0x55, 0x59, 0x51, 0xb5, 0x78, 0x4a, 0x52, 0x33, 0xbd, 0xad, 0x94, 0xb5,
  0x9a, 0xed, 0x0a, 0xb5, 0xcd, 0x4b, 0x88, 0xb5, 0xf5, 0x47, 0x10, 0xb5,
  0x3e, 0x7f, 0x4c, 0xb4, 0x8e, 0x02, 0x66, 0xb5, 0x8d, 0x2d, 0x1c, 0x35,
  0xd8, 0x22, 0x15, 0xb5, 0x68, 0xf2, 0x80, 0xb2, 0x86, 0xc5, 0x28, 0xb5,
  0x50, 0xe8, 0x4e, 0xb3, 0x0a, 0x61, 0x48, 0xb5, 0x81, 0x7b, 0x28, 0x34,
  0xf1, 0xd9, 0xdd, 0xb4, 0xd4, 0x2e, 0x73, 0x34, 0x49, 0x98, 0x8f, 0x34,
  0xe9, 0x95, 0x74, 0x35, 0xf7, 0x14, 0x67, 0x35, 0xae, 0xe9, 0x1b, 0x35,
  0x6f, 0xed, 0x83, 0x35, 0xc8, 0x95, 0x8e, 0x35, 0x68, 0x57, 0xdf, 0x34,
  0x6a, 0x2d, 0x8f, 0x35, 0xe3, 0x3b, 0x30, 0x35, 0x5b, 0xd9, 0xee, 0x35,
  0xbd, 0x48, 0xeb, 0x35, 0x49, 0xe4, 0xbd, 0x35, 0x31, 0xea, 0xaa, 0x35,
  0x13, 0x9f, 0xf9, 0x35, 0x99, 0xc8, 0x8a, 0x35, 0xee, 0xaa, 0xc0, 0x35,
  0xd1, 0x6e, 0xf8, 0x33, 0xd2, 0x69, 0xca, 0x35, 0x2b, 0xc5, 0x9d, 0x35,
  0xab, 0xf5, 0xce, 0x35, 0x77, 0x92, 0xb2, 0x35, 0x7b, 0xb7, 0xa4, 0x35,
  0x58, 0xfb, 0xc8, 0x35, 0xb8, 0x38, 0x6d, 0x35, 0xa2, 0xbe, 0x33, 0xb3,
  0xb8, 0x44, 0x8d, 0x35, 0xfd, 0x03, 0x50, 0x34, 0x2b, 0x90, 0x54, 0x35,
  0xba, 0xc0, 0x1c, 0x35, 0xcc, 0xf4, 0x4a, 0x35, 0xbd, 0x06, 0xe5, 0x35,
  0x40, 0x30, 0x82, 0x35, 0x29, 0x21, 0xd8, 0x35, 0x81, 0xa2, 0xa7, 0x35,
  0x3c, 0x7a, 0xcd, 0x35, 0xf8, 0x62, 0xca, 0x35, 0x17, 0x42, 0x2d, 0x34,
  0x57, 0x7a, 0x09, 0x35, 0xb0, 0x6e, 0x75, 0xb4, 0x92, 0xff, 0xff, 0xff,
  0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0xc9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69,
  0x61, 0x6c, 0x5f, 0x34, 0x35, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x32, 0x64,
  0x5f, 0x37, 0x32, 0x2f, 0x43, 0x6f, 0x6e, 0x76, 0x32, 0x44, 0x00, 0x00,
  0x04, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
  0x08, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x99, 0x4e, 0x35, 0xbb, 0x00, 0x00, 0x0e, 0x00,
  0x14, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x10, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x73, 0x65, 0x71, 0x75,
  0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x34, 0x35, 0x2f, 0x63, 0x6f,
  0x6e, 0x76, 0x32, 0x64, 0x5f, 0x37, 0x32, 0x2f, 0x42, 0x69, 0x61, 0x73,
  0x41, 0x64, 0x64, 0x2f, 0x52, 0x65, 0x61, 0x64, 0x56, 0x61, 0x72, 0x69,
  0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
  0x72, 0x63, 0x65, 0x00, 0x94, 0xff, 0xff, 0xff, 0x14, 0x00, 0x18, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x14, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0xe8, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x34, 0x36,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xe8, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0xfc, 0xff, 0xff, 0xff, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00};

NeuralNetwork::NeuralNetwork() : errorReporter(), model(tflite::GetModel(model_tflite)), resolver() {
    // check model version
    if (model->version() != TFLITE_SCHEMA_VERSION) {
        TF_LITE_REPORT_ERROR(
            &errorReporter, "Model provided is schema version %d not equal to supported version %d.",
            model->version(), TFLITE_SCHEMA_VERSION);
        return;
    }

    // add required operations to the resolver
    resolver.AddConv2D();
    resolver.AddRelu();

    // create interpreter
    interpreter = new tflite::MicroInterpreter(model, resolver, tensorArena, tensorArenaSize, &errorReporter);
    TfLiteStatus status = interpreter->AllocateTensors();
    if (status != kTfLiteOk) {
        TF_LITE_REPORT_ERROR(&errorReporter, "AllocateTensors() failed\n");
        return;
    }
    TF_LITE_REPORT_ERROR(&errorReporter, "Used bytes %d\n", interpreter->arena_used_bytes());

    // save the input and output pointers
    input = interpreter->input(0);
    output = interpreter->output(0);
}

float NeuralNetwork::predict(float* pInputBuffer, const int inputSize, const int outputSize) {
    // copy input tensor
    for (int i = 0; i < inputSize; i++) {
        input->data.f[i] = pInputBuffer[i];
        pInputBuffer[i] = 0.0f;
    }

    // run network
    interpreter->Invoke();

    // sum output tensor
    float result = 0.0f;
    for (int i = 0; i < outputSize; i++) {
        result += output->data.f[i];
    }
    return result;
}
